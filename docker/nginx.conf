upstream consoleServerBackend {
  ip_hash;
  server localhost:8088;
}

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {
  listen 80;
  server_name localhost;

  underscores_in_headers on;

  error_log /var/log/nginx/console.re.error.log;

  keepalive_timeout    60;

  large_client_header_buffers 8 32k;
  charset UTF-8;
  root /app/build;

  location ~* \.(jpg|jpeg|gif|png|ico|css|zip|tgz|pdf|txt|js|flv|swf|ttf|otf|woff|eot)$ {
    access_log off;
    error_log /var/log/nginx/console.re.static.error.log;
    expires 30d;
  }

  location /socket.io {
    proxy_pass http://consoleServerBackend/;
    # Please be aware that this is an "every domain can log to your server" setup and this would be a good place to hard-code the allowed referer using
    # add_header Access-Control-Allow-Origin $CORS_ORIGIN;

    # this will set the allowed referers to only https://only.my.domain
    # add_header Access-Control-Allow-Origin https://only.my.domain;

    rewrite /socket.io/(.*) /socket.io/$1 break;

    proxy_set_header Proxy '';
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_redirect off;

    set $CORS_CREDS true;
    set $CORS_ORIGIN $http_origin;
    set $CORS_METHODS 'GET, POST, PUT, DELETE, OPTIONS';
    set $CORS_HEADERS 'Authentication-Token, Cache-Control, Cookie, If-Modified-Since, Range, User-Agent, X-Requested-With X-consolere';Pgui
    # FYI: Always allowed headers: Accept, Accept-Language, Content-Language, Content-Type
    set $CORS_EXPOSE_HEADERS 'Content-Disposition, Content-Length, Content-Range, Set-Cookie';
    # FYI: Always exposed headers: Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma
    set $CORS_PREFLIGHT_CACHE_AGE 600;
    set $X_FRAME_OPTIONS '';
    # set $X_FRAME_OPTIONS "ALLOW FROM $http_origin";

    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $CORS_ORIGIN;
        add_header Access-Control-Allow-Methods $CORS_METHODS;
        add_header Access-Control-Allow-Headers $CORS_HEADERS;
        add_header Access-Control-Allow-Credentials $CORS_CREDS;

        add_header Access-Control-Max-Age $CORS_PREFLIGHT_CACHE_AGE;
        add_header Content-Type 'text/plain; charset=utf-8';
        add_header Content-Length 0;
        return 204;
    }

    if ($request_method != 'OPTIONS') {
        add_header Access-Control-Allow-Origin $CORS_ORIGIN;
        add_header Access-Control-Allow-Methods $CORS_METHODS;
        add_header Access-Control-Allow-Headers $CORS_HEADERS;
        add_header Access-Control-Allow-Credentials $CORS_CREDS;

        add_header Access-Control-Expose-Headers $CORS_EXPOSE_HEADERS;
        add_header X-Frame-Options $X_FRAME_OPTIONS;
    }

    # supposedly prevents 502 bad gateway error;
    proxy_buffers 8 32k;
    proxy_buffer_size 64k;
    proxy_read_timeout 120;
    proxy_connect_timeout 120;

    # proxy_next_upstream error timeout;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    access_log /var/log/nginx/console.re.websockets.log;
    error_log /var/log/nginx/console.re.websockets.error.log;
  }

  location / {
    access_log /var/log/nginx/console.re.access.log;
    expires 30d;
    index /www/index.html;
    error_log /var/log/nginx/console.re.error.log;
    try_files $uri $uri/ /app/consoleapp.html;
  }

  location /nginx-health {
      return 200 "healthy\n";
      add_header Content-Type text/plain;
  }
}